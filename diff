diff --git a/includes/functions.php b/includes/functions.php
index 2f80612..633b462 100644
--- a/includes/functions.php
+++ b/includes/functions.php
@@ -156,76 +156,187 @@ function draw_menu($menu, $addsep = false)
 }
 
 /***********************************************/
-function get_authors_by_name($name){
-    $name = '%'.$name.'%';
-	return SQL::run(
+/* TODO:
+ * search authors and merge results somehow into $titles
+ * support types param
+ * support user_id param
+ * support author_id param
+ * support empty query
+ */
+function book_search($req)
+{
+	/* sanitize the query */
+	$query = str_replace(array("\"", "'", "<", ">"), "", $req["query"]);
+
+	if ($req["engine"] == "simple") {
+		$titles = SQL::run(
+			"SELECT
+				type, title, name AS author, titles.id AS title_id, author_id
+			FROM
+				titles
+				LEFT JOIN authors ON titles.author_id = authors.id
+			WHERE
+				title LIKE '%s%%';",
+			$query);
+	} else { /* == full */
+		$titles = SQL::run(
+			"SELECT
+				type, title, name AS author, titles.id AS title_id, author_id
+			FROM
+				titles
+				LEFT JOIN authors ON titles.author_id = authors.id
+			WHERE
+				MATCH(title) AGAINST('%s' WITH QUERY EXPANSION);",
+			$query);
+	}
+
+	/*$authors = SQL::run(
 		"SELECT
 			id AS author_id, name AS author_name
 		FROM
 			authors
 		WHERE
-            name like '%s'",
-		$name);
+			MATCH(name) AGAINST('%s' IN BOOLEAN MODE);",
+		$query);*/
+
+	return array(
+		"query"   => $query,
+		"titles"  => $titles
+	);
 }
 
-function book_search($query)
+/** Get title id by item
+ * @param item_id       item id
+ * @return integer      title id
+ * @retval 0            item not found
+ */
+function title_get_id_by_item_id($item_id)
 {
-	/* sanitize the query */
-	$query = str_replace(array("\"", "'", "<", ">"), "", $query);
+	$owner = SQL::one("SELECT title_id FROM owners WHERE id=%u", $item_id);
 
-	/* search for titles */
-	$titles = SQL::run(
-		"SELECT
+	if ($owner)
+		return intval($owner["title_id"]);
+	else
+		return 0;
+}
+
+/** Get title by its id or item id
+ * @param title_id               title id
+ * @return array                 see RPC API
+ * @retval FALSE                 not found
+ */
+function title_view($title_id)
+{
+	/* get basic title view info */
+	$view = SQL::one("
+		SELECT
 			type, title, name AS author, titles.id AS title_id, author_id
 		FROM
 			titles
 			LEFT JOIN authors ON titles.author_id = authors.id
 		WHERE
-            title like '%s';",
-		$query."%");
+			titles.id = %u;", $title_id);
 
-	/* search for authors */
-	$authors = get_authors_by_name($query);
+	if (!$view)
+		return FALSE;
 
-	return array(
-		"query"   => $query,
-		"titles"  => $titles,
-		"authors" => $authors
-	);
-}
+	/* get owners and items */
+	$items = SQL::run("
+		SELECT
+			owners.id AS item_id, user_id, CONCAT(users.name, ' ', users.surname) AS user, users.email AS user_email
+		FROM
+			owners
+			LEFT JOIN users ON owners.user_id = users.id
+		WHERE title_id = %u;", $title_id);
+	$view["owners"] = $items;
+
+	/* determine is_owner */
+	$view["is_owner"] = false;
+	$login_uid = Session::get("uid");
+
+	foreach ($items as $item) {
+		if ($item["user_id"] == $login_uid) {
+			$view["is_owner"] = true;
+			break;
+		}
+	}
 
-function authors_search($query)
-{
-	$query = str_replace(array("\"", "'", "<", ">"), "", $query);
-    $authors = get_authors_by_name($query);           
-	return array(
-		"query"   => $query,
-		"objects"  => $authors
-	);
-}
+	/* get average mark */
+	$avgmark = SQL::one("SELECT AVG(mark) AS m FROM ratings WHERE title_id = %u;", $title_id);
+	$view["average_mark"] = floatval($avgmark["m"]);
 
-// TODO: move Create operations to separate php file
-function _insert_new_item($item_type, $item_title, $author_id)
-{
-    return	SQL::run(
-		"INSERT INTO titles SET type='%s', title='%s', author_id=CAST('%s' AS SIGNED)", // <-- probably can be done without CAST, but I don't know
-		array($item_type, $item_title, $author_id));                                                  // proper formatting parameter 
+	/* get comments */
+	$comments = SQL::run("
+		SELECT
+			comment, user_id, CONCAT(users.name, ' ', users.surname) AS user, users.email AS user_email
+		FROM
+			comments
+			LEFT JOIN users ON comments.user_id = users.id
+		WHERE title_id = %u;", $title_id);
+	$view["comments"] = $comments;
 
-    return $author_id;// TODO: return some better information here, and define standard for return value of Create operations 
+	return $view;
 }
 
-function add_item_author($item_title, $author_name)
+/** Submit title rate on behalf of the user logged in
+ * @param title_id        title id
+ * @param mark            title mark: integer 0-10; if -1, delete user rating
+ */
+function title_rate($title_id, $mark)
 {
-    // todo: transaction support
-	SQL::run("INSERT INTO authors SET name='%s'", $author_name);
-
-    $author_id_data= SQL::one("SELECT max(id) AS new_id FROM authors");
-    $author_id = $author_id_data["new_id"];
+	/* sanitize */
+	$mark = intval($mark);
+	if ($mark < -1)
+		$mark = 0;
+	else if ($mark > 10)
+		$mark = 10;
+
+	if ($mark == -1) {
+		SQL::run(
+			"DELETE FROM ratings WHERE title_id=%u AND user_id=%u;",
+			array($title_id, Session::get("uid")));
+	} else {
+		SQL::run(
+			"INSERT INTO
+				ratings (title_id, user_id, mark)
+			VALUES
+				(%u, %u, %u)
+			ON DUPLICATE KEY UPDATE
+				mark=VALUES(mark)",
+			array($title_id, Session::get("uid"), $mark));
+	}
 
-    return _insert_new_item('book', $item_title, $author_id);
+	return array(
+		"title_id"    => $title_id,
+		"mark"        => $mark
+	);
 }
 
-function add_item_author_id($item_title, $author_id)
+/** Submit title comment on behalf of the user logged in
+ * @param title_id        title id
+ * @param comment         comment; if empty, delete user comment from database
+ */
+function title_comment($title_id, $comment)
 {
-    return _insert_new_item('book', $item_title, $author_id);
+	$comment = trim(strip_tags($comment));
+
+	if (!$comment) {
+		SQL::run(
+			"DELETE FROM comments WHERE title_id=%u AND user_id=%u;",
+			array($title_id, Session::get("uid")));
+	} else {
+		SQL::run(
+			"INSERT INTO
+				comments (title_id, user_id, comment)
+			VALUES
+				(%u, %u, '%s')
+			ON DUPLICATE KEY UPDATE
+				comment = VALUES(comment)",
+			array($title_id, Session::get("uid"), $comment));
+	}
+
+	return array(
+		"title_id"    => $title_id,
+		"comment"     => $comment
+	);
 }
